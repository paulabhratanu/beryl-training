EOF  ->multiple lines.
EOC  ->execute commands.
foo,bar ->stack them
BEGIN ->first executable code.
END   ->end executable code.

= begin
This is a comment.
This is a comment, too.
This is a comment, too.
I said that already.
= end

@  ->define instance variable
@@ ->define class variable

initialize  ->constructor
constants   ->{var}

#parallel assignment in ruby
a,b,c=10,20,30

defined? is a special operator that takes the form of a method call to determine whether or not the passed expression is defined

if modifier
unless statement  ->Executes code if conditional is false
until modifier    ->Executes code while conditional is false

break    ->Terminates the most internal loop
next     ->Jumps to the next iteration of the most internal loop
redo     ->Restarts this iteration of the most internal loop, without checking loop condition(infinite loop)
retry    ->If retry appears in rescue clause of begin expression, restart from the beginning of the begin body.

begin
   do_something # exception raised
rescue
   # handles error
   retry  # restart from beginning
end

The return statement in ruby is used to return one or more values from a Ruby Method.

undef  ->This cancels the method definition. An undef cannot appear in the method body.
require ->similar to include of c++

#mixins
Ruby does not support multiple inheritance directly but Ruby Modules have another wonderful use. At a stroke, they pretty much eliminate the need for multiple inheritance, providing a facility called a mixin.
Mixins give you a wonderfully controlled way of adding functionality to classes. However, their true power comes out when the code in the mixin starts to interact with code in the class that uses it.
module A
   def a1
   end
   def a2
   end
end
module B
   def b1
   end
   def b2
   end
end

class Sample
include A
include B
   def s1
   end
end

samp = Sample.new
samp.a1
samp.a2
samp.b1
samp.b2
samp.s1

sysread  ->read the file
syswrite ->write into the file

ensure  ->like finally in java

Everything is an object in Ruby

# Initialize 3 variables here as explained in the problem statement
array=Array.new
array_1=Array.new(1)  ->null value
array_2=Array.new(2,10) ->two values with value as 10

>>arr[1..3] # .. indicates both indices are inclusive. 
  => [5,1,2]
>>arr[1...3] # ... indicates the last index is excluded.
  => [5,1]
>>arr[1,4]# ... start index and length of array
  => [5, 1, 2, 3]
 > arr = [3, 4, 2, 1, 2, 3, 4, 5, 6]
 > arr.select {|a| a > 2}
 => [3, 4, 3, 4, 5, 6]
 > arr.reject {|a| a > 2}
 => [2, 1, 2]
 > arr
 => [3, 4, 2, 1, 2, 3, 4, 5, 6]
 > arr.drop_while {|a| a > 1} # removes elements till the block returns false for the first time
 => [1, 2, 3, 4, 5, 6]
> arr = [3, 4, 2, 1, 2, 3, 4, 5, 6]  
 > arr.delete_if {|a| a < 2}
  => [3, 4, 2, 2, 3, 4, 5, 6]  
 > arr.keep_if {|a| a < 4}  
 => [3, 2, 2, 3]

#hash
empty_hash=Hash.new ->emty hash
default_hash=Hash.new(1) ->hash with default valus 1

hackerrank=Hash.new
hackerrank["simmy"]=100
hackerrank["vivmbbs"]=200

def iter_hash(hash)
    # your code here
    hash.each do |k,v|
        puts k
        puts v
    end
end

hackerrank.store(543121,100)
hackerrank.keep_if{|key,value| key.is_a?Integer}
hackerrank.delete_if{|key,value| key%2==0}

#infinite loop
loop do
    coder.practice
    if coder.oh_one?
        break
    end
end

require 'prime';
def prime?x
    x.prime?;
end

#proc
def square_of_sum (my_array, proc_square, proc_sum)
    sum = proc_sum.call(my_array)
    proc_square.call(sum)
end

proc_square_number =proc {|x| x**2}
proc_sum_array     = proc {|x| x.inject(&:+)}
my_array = gets.split().map(&:to_i)

puts square_of_sum(my_array, proc_square_number, proc_sum_array)

#lambdas
def area (l, b)
   -> { l * b } 
end

x = 10.0; y = 20.0

area_rectangle = area(x, y).call
area_triangle = 0.5 * area(x, y).()

puts area_rectangle     #200.0
puts area_triangle      #100.0

def block_message_printer()
    message = "Welcome to Block Message Printer"
    if block_given?
        
    end
  puts "But in this function/method message is :: #{message}"
end

message = gets
puts "This message remembers message :: #{message}"
block_message_printer { puts "This message remembers message :: #{message}" }

#####################################################################################

def proc_message_printer(my_proc)
    message = "Welcome to Proc Message Printer"
    my_proc.call              #Call my_proc
    puts "But in this function/method message is :: #{message}"
end


my_proc = proc { puts "This message remembers message :: #{message}" }
proc_message_printer(my_proc)
    
######################################################################################    
    
def lambda_message_printer(my_lambda)
    message = "Welcome to Lambda Message Printer"
    my_lambda.call#_________________________              #Call my_lambda
    puts "But in this function/method message is :: #{message}"
end

my_lambda = -> { puts "This message remembers message :: #{message}" }
lambda_message_printer(my_lambda)    
    
######################################################################################    

multiply_numbers = -> (x,y) do
    x*y
end

doubler = multiply_numbers.curry.(2)
tripler = multiply_numbers.curry.(3)

puts doubler.(4)    #8
puts tripler.(4)    #12

my_string = "Hello." # create a string from a literal
my_empty_string = String.new # create an empty string
my_copied_string = String.new(my_string) # copy a string to a new variable

#encoding
def transcode(str)
    str.force_encoding("utf-8")
end

#string methods
String.strip - Returns a new string with the leading and trailing whitespace removed.
String.chop - Returns a new string with the last character removed
String.chomp(separator=$/): Returns a new string with the given separator removed from the end of the string
String.include?(string) - Returns true if str contains the given string or character. Very simple!
